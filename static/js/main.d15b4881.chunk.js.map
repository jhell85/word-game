{"version":3,"sources":["actions/index.js","components/HangmanControl.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/guessed-letter-reducer.js","reducers/lives-reducer.js","reducers/words-to-guess-reducer.js","reducers/win-reducer.js","reducers/toggle-game-reducer.js","index.js"],"names":["setWord","word","type","right","index","addLetter","letter","HangmanControl","getIndexes","arr","indexes","forEach","e","i","push","startGame","dispatch","props","randomWords","guess","event","target","setAttribute","wordToGuess","length","elementIndex","checkWin","win","guessed","restart","displayWord","className","this","game","map","key","onClick","lives","disabled","character","HeartFilled","style","color","value","Component","connect","state","guessedLetters","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","temp","includes","letters","store","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d15b4881.chunk.js","sourcesContent":["export const setWord = (word) => ({ type: \"SET_WORD\", word })\n\nexport const reset =()=> ({type:'RESET'})\n\nexport const right =(index)=> ({type:\"RIGHT\",index}) \n\nexport const toggle = () => ({type: 'TOGGLE'})\n\nexport const setWin = () => ({type: 'SET_WIN'})\n\nexport const loseLife = () => ({type: 'LOSE_LIFE'})\n\nexport const addLetter = (letter) => ({type:\"ADD_LETTER\", letter})","\nimport React, { Component} from 'react'\nimport {connect} from \"react-redux\"\nimport { Rate } from 'antd';\nimport { HeartFilled } from '@ant-design/icons';\nimport randomWords from 'random-words'\nimport {setWord, reset, right, toggle, setWin, loseLife, addLetter} from '../actions'\n\nclass HangmanControl extends Component {\n// function to return array of indexes of the word to guess state that match guessed letter\n\ngetIndexes=(arr,letter)=>{\n  let indexes =[]\n  arr.forEach((e,i)=>{\n    if(e.letter === letter){\n      indexes.push(i);\n    }\n  })\n  return indexes;\n}\n\n// will eventually set the word from Api or word list\n startGame=()=>{\n   const {dispatch} = this.props;\n   dispatch(setWord(randomWords()))\n   dispatch(toggle())\n }\n\n //main function where the gussedletter is compared and the game updated\n guess=(letter, event)=>{\n  event.target.setAttribute(\"disabled\",true)\n  const word = this.props.wordToGuess; \n  const {dispatch} = this.props;\n  \n  dispatch(addLetter(letter))\n  //see above declaration\n  let indexes = this.getIndexes(word, letter)\n \n  if (indexes.length>0){\n    event.target.setAttribute(\"class\",\"green\")\n    indexes.forEach((elementIndex)=>{\n      dispatch(right(elementIndex))\n    })\n    this.checkWin()\n  } else{\n    dispatch(loseLife())\n    event.target.setAttribute(\"class\",\"red\")\n\n  }\n}\ncheckWin=()=>{\n  let win = true\n  this.props.wordToGuess.forEach(letter=>{\n    if(!letter.guessed){\n      win=false\n    }\n  })\n  if(win){\n    const {dispatch} = this.props;\n    dispatch(setWin())\n  }\n}\nrestart=()=>{\n  const {dispatch} = this.props;\n  dispatch(reset())\n}\n\ndisplayWord=()=>{\n let word = ''\n  this.props.wordToGuess.forEach(e => {\n    word+=e.letter\n  });\n  return word\n}\n\n\n  render() {\n    \n    let alph = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\",\n    \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  \n    return (\n      <div className=\"main\">\n        {!this.props.game? <button className=\"start\" onClick={this.startGame}>START</button>:\n        <div className=\"game-screen\">\n          <h2 className=\"win\">{this.props.win? \"Congrats you win\": ''}</h2>\n\n          <h1 className=\"word\">\n            {this.props.wordToGuess.map((letter,i)=><span key={i} >{letter.guessed? letter.letter: \"_\"} </span>)}\n          </h1>\n          <div className=\"button-cont\">\n            {alph.map(letter=><button  key={letter} onClick={(event)=>this.guess(letter,event)}>{letter}</button>)}\n          </div>\n\n          <div className=\"lives\">\n            {this.props.lives>0?<Rate disabled character={<HeartFilled/>} style={{color:\"red\"}} value={this.props.lives}/>:<p> You lost :( the word was <strong>{this.displayWord()}</strong></p>}\n          </div>\n\n          <div className=\"reset\">\n            <button onClick={this.restart}>reset</button>\n          </div>\n        </div>\n        }  \n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  const { guessedLetters, lives, wordToGuess, win, game} = state\n  return { guessedLetters, lives, wordToGuess, win, game }\n}\n\nHangmanControl = connect(mapStateToProps)(HangmanControl)\nexport default HangmanControl\n","import React from 'react';\nimport HangmanControl from './HangmanControl'\nimport 'antd/dist/antd.css'; //======> need this for antd\nimport '../App.css';\n\nfunction App() {\n  return (\n   <HangmanControl/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport guessedLetterReducer from \"./guessed-letter-reducer\";\nimport livesReducer from './lives-reducer'\nimport wordToGuessReducer from './words-to-guess-reducer'\nimport winReducer from './win-reducer'\nimport gameReducer from './toggle-game-reducer'\n\n\nconst rootReducer = combineReducers({\n  guessedLetters: guessedLetterReducer,\n  lives: livesReducer,\n  wordToGuess: wordToGuessReducer,\n  win: winReducer,\n  game: gameReducer\n});\n\nexport default rootReducer","export default (state=[], action)=>{\n  const {letter} = action;\n  switch (action.type) {\n    case \"ADD_LETTER\":\n      let temp=[...state]\n      if(!temp.includes(letter)){\n        temp.push(letter)\n      }\n      return temp;\n\n    case \"RESET\":\n      return [];\n   \n    default:\n      return state;\n  }\n}","export default (state=5, action)=>{\n switch(action.type){\n   case \"LOSE_LIFE\":\n     let temp = state;\n     if(temp>0){\n       temp -= 1\n     }\n     return temp;\n\n   case \"RESET\":\n     return 5;  \n\n    default:\n      return state\n }\n}","export default (state=[], action)=>{\n  const {word, index} = action;\n  switch (action.type) {\n    case \"SET_WORD\":\n      let temp=[]\n     let letters= [...word]\n      letters.forEach(letter => {\n        temp.push({letter, guessed:false})\n        \n      });\n\n      return temp;\n\n    case \"RIGHT\":\n      let guessed = [...state];\n      guessed[index].guessed = true;\n      return guessed;\n\n    case \"RESET\":\n      return [];\n   \n    default:\n      return state;\n  }\n}","export default (state=false, action)=>{\n  switch (action.type) {\n    case \"SET_WIN\":\n       return true;\n    case \"RESET\":\n      return false;\n    default:\n      return state;\n  }\n}","export default (state=false, action)=>{\n  switch (action.type) {\n    case \"TOGGLE\":\n       return !state;\n    case \"RESET\":\n      return false;\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport reducer from './reducers/index'\nimport {Provider} from 'react-redux'\n\n\n\nconst store = createStore(reducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}